@model WebApp.ViewModel.StudentCreateViewModel
@{
    ViewBag.Title = "CreateStudentUser";
}

<h2>Create Student and User</h2>
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
<form action="~/admin/student/createstudentuser" , method="post">
    <div class="input-group input-group-outline">
        <label class="form-label">Name</label>
        @Html.EditorFor(p => p.Name, new
        {
            htmlAttributes = new { @class = "form-control", onfocus = "focused(this)", onfocusout = "defocused(this)" }
        })
        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        @*<input type="text" name="Name" class="form-control" onfocus="focused(this)" onfocusout="defocused(this)">*@
    </div>
    <br />
    <div class="input-group input-group-outline">
        <label class="form-label">Email</label>
        @Html.EditorFor(p => p.Email, new
        {
            htmlAttributes = new { @class = "form-control", onfocus = "focused(this)", onfocusout = "defocused(this)" }
        })
        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
    </div>
    <br />
    <div class="input-group input-group-outline">
        <label class="form-label">Phone</label>
        @Html.EditorFor(p => p.Phone, new
        {
            htmlAttributes = new { @class = "form-control", onfocus = "focused(this)", onfocusout = "defocused(this)" }
      })
        @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
    </div>
    <br />
    <div class="input-group input-group-outline">
       
        <select class="form-control" name="StanrdId">
            <option value="1">Class 1</option>
            <option value="2">Class 2</option>
        </select>
    </div>
    <br />
    <div class="input-group input-group-outline">
        <label class="form-label">Password</label>
        @Html.EditorFor(p => p.Password, new
        {
            htmlAttributes = new { @class = "form-control", onfocus = "focused(this)", onfocusout = "defocused(this)" }
       })
        @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
    </div>
    <br />
    <div class="input-group input-group-outline">
        <label class="form-label">Confirm Password</label>
        @Html.EditorFor(p => p.ConfirmPassword, new
        {
            htmlAttributes = new { @class = "form-control", onfocus = "focused(this)", onfocusout = "defocused(this)" }
       })
        @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
    </div>
    <br />
    <div class="input-group input-group-outline">
        <button type="submit">Create</button>
    </div>
</form>
